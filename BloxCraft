local prefix = ";"

local Remote = game:GetService("ReplicatedStorage"):WaitForChild("ModGui")
local Mod = {
    Filtered = {
        "Exploiting.",
        "Exploiting"
    },
    Kick = function(self, plr, reason)
        plr = type(plr) == "number" and plr or plr.UserId
        reason = reason or "Exploiting."
        
        if not table.find(self.Filtered, reason) then
            Remote:InvokeServer("filter", {
                plr,
                reason
            })
            table.insert(self.Filtered, reason)
        end
        
        return pcall(function()
            return Remote:InvokeServer("kick", {
                plr,
                reason
            })
        end)
    end,
    Warn = function(self, plr, reason)
        plr = type(plr) == "number" and plr or plr.UserId
        assert(reason, "A reason is needed to warn someone dumbass.")
        
        if not table.find(self.Filtered, reason) then
            Remote:InvokeServer("filter", {
                plr,
                reason
            })
            table.insert(self.Filtered, reason)
        end
        
        return pcall(function()
                return Remote:InvokeServer("warn", {
                plr,
                reason
            })
        end)
    end,
    Ban = function(self, plr, duration, reason)
        plr = type(plr) == "number" and plr or plr.UserId
        duration = duration or math.huge
        reason = reason or "Exploiting."
        
        if not table.find(self.Filtered, reason) then
            Remote:InvokeServer("filter", {
                plr,
                reason
            })
            table.insert(self.Filtered, reason)
        end
        
        return pcall(function()
            return Remote:InvokeServer("ban", {
                plr,
                reason,
                duration
            })
        end)
    end,
    EditBan = function(self, plr, new_reason, new_status, new_duration)
        plr = type(plr) == "number" and plr or plr.UserId
        local old_data
        
        local infractions = self.Lookup(plr)
        for _, infraction in next, infractions do
            if infraction.type == "Ban" then
                pcall(function()
                    return Remote:InvokeServer("editban", {
                        plr,
                        infraction,
                        new_reason or infraction.reason,
                        new_status,
                        new_duration or math.huge
                    })
                end)
            end
        end
    end,
    Lookup = function(plr)
        return Remote:InvokeServer("lookup", {
            type(plr) == "number" and plr or plr.UserId
        })
    end
}

function getplayer(name)
    name = name:lower()
    if name=="all" then return game.Players:GetPlayers() end
    if name=="others" then
        local players = {}
        for _, player in next, game.Players:GetPlayers() do
            if player ~= game.Players.LocalPlayer then
                table.insert(players, player)
            end
        end
        return players
    end
    local players = {}
    for _, player in next, game.Players:GetPlayers() do
        if player.Name:lower():match(("^%s"):format(name)) or player.DisplayName:lower():match(("^%s"):format(name)) then
            table.insert(players, player)
        end
    end
    return players
end

local Commands = {
    kick = function(plr, ...)
        local reason = table.concat({...}, " ")
        reason = reason == "" and "Exploiting." or reason
        
        for _, player in next, getplayer(plr) do
            Mod:Kick(player, reason)
        end
    end,
    ban = function(plr, duration, ...)
        local reason = table.concat({...}, " ")
        duration = duration:lower() == "inf" and math.huge or tonumber(duration)
        reason = reason == "" and "Exploiting." or reason
        
        for _, player in next, getplayer(plr) do
            Mod:Ban(player, duration, reason)
        end
    end,
    warn = function(plr, ...)
        local reason = table.concat({...}, " ")
        reason = reason == "" and "Exploiting." or reason
        
        for _, player in next, getplayer(plr) do
            Mod:Warn(player, reason)
        end
    end,
    unban = function(userid)
        Mod:EditBan(tonumber(userid), nil, nil, 1)
    end
}

game.Players.LocalPlayer.Chatted:Connect(function(message)
    local command = message:match(prefix .. "(%w+)%s?"):lower()
    local arguments = message:split(" ")
    table.remove(arguments, 1)
    
    Commands[command](table.unpack(arguments))
end)
